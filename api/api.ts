/* tslint:disable */
/* eslint-disable */
/**
 * @ledge/external-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Enums
 * @export
 * @enum {string}
 */

export const ActivityType = {
    UserSignUp: 'USER_SIGN_UP',
    Referral: 'REFERRAL',
    GameClick: 'GAME_CLICK',
    SocialClick: 'SOCIAL_CLICK',
    External: 'EXTERNAL',
    ActivityResumed: 'ACTIVITY_RESUMED',
    ActivityPaused: 'ACTIVITY_PAUSED',
    ActivityStopped: 'ACTIVITY_STOPPED',
    ForegroundServiceStart: 'FOREGROUND_SERVICE_START',
    ForegroundServiceStop: 'FOREGROUND_SERVICE_STOP',
    GameInstalled: 'GAME_INSTALLED'
} as const;

export type ActivityType = typeof ActivityType[keyof typeof ActivityType];


/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'code': number;
}
/**
 * 
 * @export
 * @interface ExternalUser
 */
export interface ExternalUser {
    /**
     * 
     * @type {string}
     * @memberof ExternalUser
     */
    'originalCreationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalUser
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ExternalUser
     */
    'username': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Gender = {
    Male: 'male',
    Female: 'female',
    Other: 'other',
    Unknown: 'unknown'
} as const;

export type Gender = typeof Gender[keyof typeof Gender];


/**
 * Model Goal
 * @export
 * @interface Goal
 */
export interface Goal {
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'questId': string;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'objectId': string | null;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'bannerUrl': string | null;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'instructions': string | null;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'description': string | null;
    /**
     * 
     * @type {ActivityType}
     * @memberof Goal
     */
    'activity': ActivityType;
    /**
     * 
     * @type {number}
     * @memberof Goal
     */
    'target': number;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Goal
     */
    'id': string;
}


/**
 * 
 * @export
 * @interface GoalCreateInput
 */
export interface GoalCreateInput {
    /**
     * 
     * @type {string}
     * @memberof GoalCreateInput
     */
    'bannerUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GoalCreateInput
     */
    'instructions'?: string;
    /**
     * 
     * @type {string}
     * @memberof GoalCreateInput
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GoalCreateInput
     */
    'activityId': string;
    /**
     * 
     * @type {string}
     * @memberof GoalCreateInput
     */
    'questId': string;
    /**
     * 
     * @type {number}
     * @memberof GoalCreateInput
     */
    'target': number;
    /**
     * 
     * @type {string}
     * @memberof GoalCreateInput
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface GoalUpdateInput
 */
export interface GoalUpdateInput {
    /**
     * 
     * @type {string}
     * @memberof GoalUpdateInput
     */
    'bannerUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GoalUpdateInput
     */
    'instructions'?: string;
    /**
     * 
     * @type {string}
     * @memberof GoalUpdateInput
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GoalUpdateInput
     */
    'activityId': string;
    /**
     * 
     * @type {string}
     * @memberof GoalUpdateInput
     */
    'questId': string;
    /**
     * 
     * @type {number}
     * @memberof GoalUpdateInput
     */
    'target': number;
    /**
     * 
     * @type {string}
     * @memberof GoalUpdateInput
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GoalUpdateInput
     */
    'goalId': string;
}
/**
 * 
 * @export
 * @interface GoalUpdateInputAllOf
 */
export interface GoalUpdateInputAllOf {
    /**
     * 
     * @type {string}
     * @memberof GoalUpdateInputAllOf
     */
    'goalId': string;
}
/**
 * Model Leaderboard
 * @export
 * @interface Leaderboard
 */
export interface Leaderboard {
    /**
     * 
     * @type {string}
     * @memberof Leaderboard
     */
    'gameId': string;
    /**
     * 
     * @type {string}
     * @memberof Leaderboard
     */
    'altScoreTextAlias': string | null;
    /**
     * 
     * @type {string}
     * @memberof Leaderboard
     */
    'scoreTextAlias': string;
    /**
     * 
     * @type {string}
     * @memberof Leaderboard
     */
    'imageUrl': string | null;
    /**
     * 
     * @type {string}
     * @memberof Leaderboard
     */
    'description': string | null;
    /**
     * 
     * @type {string}
     * @memberof Leaderboard
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Leaderboard
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Leaderboard
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Leaderboard
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface LeaderboardCreateInput
 */
export interface LeaderboardCreateInput {
    /**
     * 
     * @type {string}
     * @memberof LeaderboardCreateInput
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardCreateInput
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardCreateInput
     */
    'altScoreTextAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardCreateInput
     */
    'scoreTextAlias': string;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardCreateInput
     */
    'title': string;
}
/**
 * Model LeaderboardSchedule
 * @export
 * @interface LeaderboardSchedule
 */
export interface LeaderboardSchedule {
    /**
     * 
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'leaderboardId': string;
    /**
     * 
     * @type {boolean}
     * @memberof LeaderboardSchedule
     */
    'rewardsProcessed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LeaderboardSchedule
     */
    'scheduleProcessed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LeaderboardSchedule
     */
    'recurring': boolean;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'endTime': string | null;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof LeaderboardSchedule
     */
    'id': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaGoalProductUncheckedCreateInputExcludeKeyofPrismaGoalProductUncheckedCreateInputIdOrCreatedAtOrUpdatedAtOrUserQuestDraws
 */
export interface PickPrismaGoalProductUncheckedCreateInputExcludeKeyofPrismaGoalProductUncheckedCreateInputIdOrCreatedAtOrUpdatedAtOrUserQuestDraws {
    /**
     * 
     * @type {number}
     * @memberof PickPrismaGoalProductUncheckedCreateInputExcludeKeyofPrismaGoalProductUncheckedCreateInputIdOrCreatedAtOrUpdatedAtOrUserQuestDraws
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof PickPrismaGoalProductUncheckedCreateInputExcludeKeyofPrismaGoalProductUncheckedCreateInputIdOrCreatedAtOrUpdatedAtOrUserQuestDraws
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof PickPrismaGoalProductUncheckedCreateInputExcludeKeyofPrismaGoalProductUncheckedCreateInputIdOrCreatedAtOrUpdatedAtOrUserQuestDraws
     */
    'goalId': string;
}
/**
 * From T, pick a set of properties whose keys are in the union K
 * @export
 * @interface PickPrismaLeaderboardRewardUncheckedCreateInputExcludeKeyofPrismaLeaderboardRewardUncheckedCreateInputIdOrCreatedAtOrUpdatedAt
 */
export interface PickPrismaLeaderboardRewardUncheckedCreateInputExcludeKeyofPrismaLeaderboardRewardUncheckedCreateInputIdOrCreatedAtOrUpdatedAt {
    /**
     * 
     * @type {number}
     * @memberof PickPrismaLeaderboardRewardUncheckedCreateInputExcludeKeyofPrismaLeaderboardRewardUncheckedCreateInputIdOrCreatedAtOrUpdatedAt
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof PickPrismaLeaderboardRewardUncheckedCreateInputExcludeKeyofPrismaLeaderboardRewardUncheckedCreateInputIdOrCreatedAtOrUpdatedAt
     */
    'rewardPlace': number;
    /**
     * 
     * @type {string}
     * @memberof PickPrismaLeaderboardRewardUncheckedCreateInputExcludeKeyofPrismaLeaderboardRewardUncheckedCreateInputIdOrCreatedAtOrUpdatedAt
     */
    'leaderboardScheduleId': string;
    /**
     * 
     * @type {string}
     * @memberof PickPrismaLeaderboardRewardUncheckedCreateInputExcludeKeyofPrismaLeaderboardRewardUncheckedCreateInputIdOrCreatedAtOrUpdatedAt
     */
    'productId': string;
}
/**
 * Batch Payload for updateMany & deleteMany & createMany
 * @export
 * @interface PrismaBatchPayload
 */
export interface PrismaBatchPayload {
    /**
     * 
     * @type {number}
     * @memberof PrismaBatchPayload
     */
    'count': number;
}
/**
 * Model Quest
 * @export
 * @interface Quest
 */
export interface Quest {
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    'gameId': string;
    /**
     * 
     * @type {QuestType}
     * @memberof Quest
     */
    'type': QuestType;
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    'description': string | null;
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Quest
     */
    'id': string;
}


/**
 * 
 * @export
 * @interface QuestCreateInput
 */
export interface QuestCreateInput {
    /**
     * 
     * @type {QuestType}
     * @memberof QuestCreateInput
     */
    'type': QuestType;
    /**
     * 
     * @type {string}
     * @memberof QuestCreateInput
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof QuestCreateInput
     */
    'title': string;
}


/**
 * Model QuestSchedule
 * @export
 * @interface QuestSchedule
 */
export interface QuestSchedule {
    /**
     * 
     * @type {string}
     * @memberof QuestSchedule
     */
    'questId': string;
    /**
     * 
     * @type {boolean}
     * @memberof QuestSchedule
     */
    'processed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestSchedule
     */
    'recurring': boolean;
    /**
     * 
     * @type {string}
     * @memberof QuestSchedule
     */
    'endTime': string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestSchedule
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof QuestSchedule
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof QuestSchedule
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof QuestSchedule
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface QuestScheduleCreateInput
 */
export interface QuestScheduleCreateInput {
    /**
     * 
     * @type {boolean}
     * @memberof QuestScheduleCreateInput
     */
    'recurring'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleCreateInput
     */
    'questId': string;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleCreateInput
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleCreateInput
     */
    'startTime': string;
}
/**
 * 
 * @export
 * @interface QuestScheduleDetailed
 */
export interface QuestScheduleDetailed {
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleDetailed
     */
    'questId': string;
    /**
     * 
     * @type {boolean}
     * @memberof QuestScheduleDetailed
     */
    'processed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestScheduleDetailed
     */
    'recurring': boolean;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleDetailed
     */
    'endTime': string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleDetailed
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleDetailed
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleDetailed
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleDetailed
     */
    'id': string;
    /**
     * 
     * @type {Quest}
     * @memberof QuestScheduleDetailed
     */
    'quest': Quest;
}
/**
 * 
 * @export
 * @interface QuestScheduleDetailedAllOf
 */
export interface QuestScheduleDetailedAllOf {
    /**
     * 
     * @type {Quest}
     * @memberof QuestScheduleDetailedAllOf
     */
    'quest': Quest;
}
/**
 * 
 * @export
 * @interface QuestScheduleUpdateInput
 */
export interface QuestScheduleUpdateInput {
    /**
     * 
     * @type {boolean}
     * @memberof QuestScheduleUpdateInput
     */
    'recurring': boolean;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleUpdateInput
     */
    'questId': string;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleUpdateInput
     */
    'endTime': string;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleUpdateInput
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleUpdateInput
     */
    'questScheduleId': string;
}
/**
 * 
 * @export
 * @interface QuestScheduleUpdateInputAllOf
 */
export interface QuestScheduleUpdateInputAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof QuestScheduleUpdateInputAllOf
     */
    'recurring': boolean;
    /**
     * 
     * @type {string}
     * @memberof QuestScheduleUpdateInputAllOf
     */
    'questScheduleId': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const QuestType = {
    Individual: 'INDIVIDUAL',
    Community: 'COMMUNITY'
} as const;

export type QuestType = typeof QuestType[keyof typeof QuestType];


/**
 * 
 * @export
 * @interface QuestUpdateInput
 */
export interface QuestUpdateInput {
    /**
     * 
     * @type {QuestType}
     * @memberof QuestUpdateInput
     */
    'type': QuestType;
    /**
     * 
     * @type {string}
     * @memberof QuestUpdateInput
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof QuestUpdateInput
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof QuestUpdateInput
     */
    'questId': string;
}


/**
 * 
 * @export
 * @interface QuestUpdateInputAllOf
 */
export interface QuestUpdateInputAllOf {
    /**
     * 
     * @type {string}
     * @memberof QuestUpdateInputAllOf
     */
    'questId': string;
}
/**
 * 
 * @export
 * @interface RegisterUser200Response
 */
export interface RegisterUser200Response {
    /**
     * 
     * @type {string}
     * @memberof RegisterUser200Response
     */
    'linkingCode': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUser200Response
     */
    'ledgeLink': string;
}
/**
 * 
 * @export
 * @interface TrackActivity200Response
 */
export interface TrackActivity200Response {
    /**
     * 
     * @type {string}
     * @memberof TrackActivity200Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface TrackActivityInput
 */
export interface TrackActivityInput {
    /**
     * 
     * @type {string}
     * @memberof TrackActivityInput
     */
    'occurrence': string;
    /**
     * 
     * @type {number}
     * @memberof TrackActivityInput
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrackActivityInput
     */
    'activityId': string;
    /**
     * 
     * @type {string}
     * @memberof TrackActivityInput
     */
    'userId': string;
}
/**
 * Model User
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastLogin': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'verified': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'mergedWith': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'gameId': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'externalId': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'referredById': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'enableNotifications': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'hasAcceptedLegal': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'hasOnboarded': boolean;
    /**
     * 
     * @type {Gender}
     * @memberof User
     */
    'gender': Gender;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'birthYear': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatar': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'remainingReferrals': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'usertag': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phoneNumber': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'authId': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'originalCreationDate': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
}



/**
 * ExternalApi - axios parameter creator
 * @export
 */
export const ExternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} apiKey 
         * @param {ExternalUser} externalUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (apiKey: string, externalUser: ExternalUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('registerUser', 'apiKey', apiKey)
            // verify required parameter 'externalUser' is not null or undefined
            assertParamExists('registerUser', 'externalUser', externalUser)
            const localVarPath = `/external/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(externalUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} apiKey 
         * @param {TrackActivityInput} trackActivityInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackActivity: async (apiKey: string, trackActivityInput: TrackActivityInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            assertParamExists('trackActivity', 'apiKey', apiKey)
            // verify required parameter 'trackActivityInput' is not null or undefined
            assertParamExists('trackActivity', 'trackActivityInput', trackActivityInput)
            const localVarPath = `/external/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey != null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trackActivityInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalApi - functional programming interface
 * @export
 */
export const ExternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} apiKey 
         * @param {ExternalUser} externalUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(apiKey: string, externalUser: ExternalUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(apiKey, externalUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} apiKey 
         * @param {TrackActivityInput} trackActivityInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackActivity(apiKey: string, trackActivityInput: TrackActivityInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackActivity200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackActivity(apiKey, trackActivityInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExternalApi - factory interface
 * @export
 */
export const ExternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalApiFp(configuration)
    return {
        /**
         * 
         * @param {string} apiKey 
         * @param {ExternalUser} externalUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(apiKey: string, externalUser: ExternalUser, options?: any): AxiosPromise<RegisterUser200Response> {
            return localVarFp.registerUser(apiKey, externalUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} apiKey 
         * @param {TrackActivityInput} trackActivityInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackActivity(apiKey: string, trackActivityInput: TrackActivityInput, options?: any): AxiosPromise<TrackActivity200Response> {
            return localVarFp.trackActivity(apiKey, trackActivityInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExternalApi - object-oriented interface
 * @export
 * @class ExternalApi
 * @extends {BaseAPI}
 */
export class ExternalApi extends BaseAPI {
    /**
     * 
     * @param {string} apiKey 
     * @param {ExternalUser} externalUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    public registerUser(apiKey: string, externalUser: ExternalUser, options?: AxiosRequestConfig) {
        return ExternalApiFp(this.configuration).registerUser(apiKey, externalUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} apiKey 
     * @param {TrackActivityInput} trackActivityInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    public trackActivity(apiKey: string, trackActivityInput: TrackActivityInput, options?: AxiosRequestConfig) {
        return ExternalApiFp(this.configuration).trackActivity(apiKey, trackActivityInput, options).then((request) => request(this.axios, this.basePath));
    }
}


