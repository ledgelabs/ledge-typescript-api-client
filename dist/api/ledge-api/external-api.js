"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * @ledge/external-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalApi = exports.ExternalApiFactory = exports.ExternalApiFp = exports.ExternalApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ExternalApi - axios parameter creator
 * @export
 */
const ExternalApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} apiKey
         * @param {ExternalUser} externalUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: (apiKey_1, externalUser_1, ...args_1) => __awaiter(this, [apiKey_1, externalUser_1, ...args_1], void 0, function* (apiKey, externalUser, options = {}) {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('registerUser', 'apiKey', apiKey);
            // verify required parameter 'externalUser' is not null or undefined
            (0, common_1.assertParamExists)('registerUser', 'externalUser', externalUser);
            const localVarPath = `/external/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(externalUser, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} apiKey
         * @param {TrackActivityInput} trackActivityInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackActivity: (apiKey_2, trackActivityInput_1, ...args_2) => __awaiter(this, [apiKey_2, trackActivityInput_1, ...args_2], void 0, function* (apiKey, trackActivityInput, options = {}) {
            // verify required parameter 'apiKey' is not null or undefined
            (0, common_1.assertParamExists)('trackActivity', 'apiKey', apiKey);
            // verify required parameter 'trackActivityInput' is not null or undefined
            (0, common_1.assertParamExists)('trackActivity', 'trackActivityInput', trackActivityInput);
            const localVarPath = `/external/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (apiKey != null) {
                localVarHeaderParameter['ApiKey'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(trackActivityInput, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ExternalApiAxiosParamCreator = ExternalApiAxiosParamCreator;
/**
 * ExternalApi - functional programming interface
 * @export
 */
const ExternalApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ExternalApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} apiKey
         * @param {ExternalUser} externalUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(apiKey, externalUser, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.registerUser(apiKey, externalUser, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} apiKey
         * @param {TrackActivityInput} trackActivityInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackActivity(apiKey, trackActivityInput, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.trackActivity(apiKey, trackActivityInput, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ExternalApiFp = ExternalApiFp;
/**
 * ExternalApi - factory interface
 * @export
 */
const ExternalApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ExternalApiFp)(configuration);
    return {
        /**
         *
         * @param {string} apiKey
         * @param {ExternalUser} externalUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(apiKey, externalUser, options) {
            return localVarFp.registerUser(apiKey, externalUser, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} apiKey
         * @param {TrackActivityInput} trackActivityInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackActivity(apiKey, trackActivityInput, options) {
            return localVarFp.trackActivity(apiKey, trackActivityInput, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ExternalApiFactory = ExternalApiFactory;
/**
 * ExternalApi - object-oriented interface
 * @export
 * @class ExternalApi
 * @extends {BaseAPI}
 */
class ExternalApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} apiKey
     * @param {ExternalUser} externalUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    registerUser(apiKey, externalUser, options) {
        return (0, exports.ExternalApiFp)(this.configuration).registerUser(apiKey, externalUser, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} apiKey
     * @param {TrackActivityInput} trackActivityInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalApi
     */
    trackActivity(apiKey, trackActivityInput, options) {
        return (0, exports.ExternalApiFp)(this.configuration).trackActivity(apiKey, trackActivityInput, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ExternalApi = ExternalApi;
